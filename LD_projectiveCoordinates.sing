/*
This Singular file demonstrates generation of points, and point
doubling operations on ECC over GF(2^3) = GF(8).
*/

/*********
This is a Procedure to do point doubling
(x3, y3) = 2P(x1, y1). Proc takes a "list" P, where P[1] = x1, P[2] =
y1, and returns a list R = [x3, y3].
**********/
proc PplusP(list P){
list R;
number m, x3, y3;

m = P[1] + P[2]/P[1];
// a = alpha^2
x3 = m^2 + m + X^2; 
y3 = P[1]^2 + (m+1)*x3;

R = x3, y3;

//"List R:";
//R;

return(R);
}

/*********
This is a Procedure to do point addition
 Proc takes a "list" P and a "list Q", where P[1] = x1, P[2] =
y1, and returns a list R = [x3, y3].
**********/
proc PplusQ(list P,list Q){
list R;
number m, x3, y3;
if(Q[1] + P[1] == 0){
  printf("Point at infinity");
  return(0,0);
}
m = (Q[2] + P[2]) / (Q[1] + P[1]);
// a = alpha^2
x3 = m^2 + m + X^2 + Q[1] + P[1]; 
y3 = m*(P[1] + x3) + P[2] + x3;

R = x3, y3;

return(R);

}

/*********
This is a Procedure to do point doubling
(x2, y2) = 2P(x1, y1). Proc takes a "list" P, where P[1] = x1, P[2] =
y1, and returns a list R = [x3, y3]. a = X^2 b = 1
**********/
proc DL_PplusP(list P){
list R;
number m, x2, y2;

m = P[1] + P[2]/P[1];
// a = alpha^2
x2 = P[1]^2 + (1/P[1]^2);
y2 = (1/P[1]^2) + X^2*x2 + (P[2]^2 + 1)*(1+(1/P[1]^4));

R = x2, y2;

return(R);
}

/*********
This is a Procedure does repeated point doubling more efficiently
**********/
proc DL_PplusP_repeated(list P, number i){
list R;

if (i == 1) {
	R = DL_PplusP(P)
}
else {
	//TODO
}

return(R);
}


/*********
For hardware verification, do math to change point from
projective coordinate system to affine coordinate system.
**********/
proc ProjectiveToAffine(list P){
	number xa,ya,za;
	list R;

	xa = P[1];
	ya = P[2];
	za = P[3];

	// Don't know syntax for else if, sorry for the ugly nested if's
	if (za == 0) {
		if (xa != 0 and ya != 0) {
			printf("    (m,n,0) means Line meets curve at infinity");
			R[1] = "infinity";
			R[2] = "infinity";
		}
		else {
			if (xa == 0 and ya == 0) {
					printf("    (0,0,0) means point at infinity.");
					R[1] = "infinity";
					R[2] = "infinity";

			}
			else {
				if (xa == 0) {
					printf("    (0,n,0) means Vertical line.");
					R[1] = 0;
					R[2] = "infinity";
				}
				else { // (ya == 0)
					printf("    (m,0,0) means Horizantle line.");
					R[1] = "infinity";
					R[2] = 0;
				}
			}
		}
	}
	else {
		R[1] = xa / za;
		R[2] = ya / za^2;
	}

	return (R);
}

/**********************************************************************
START of main script
***********************************************************************/
// Declare the ring over GF(8), with 2 variables, x and y
ring r = (2, X), (y, x), lp;
// This is the primitive polynomial given to us as a specification
// Here X = \alpha
minpoly = X^3 + X^2 + 1;
int i;
// print values of X
printf("printing values of alpha:");
for(i=0; i<8; i = i+1){
    printf("X%s is: %s",i,X^i);
}


// This is the non-singular elliptic curve also given to us as the spec
poly E = y^2 + x*y + x^3 + X^2*x^2 + 1;

// Now we will generate the points
int i;
// We use poly f to generate the points
poly f;

printf("when i = %s", 0);
// Substitute x = 0 in E
f = subst(E, x, 0);
printf("poly f is:");
f;
printf("poly f factorizes as follows:");
factorize(f);
"================================";

// 0 = special element, now we generate the remaining 7 elements
for(i=1; i<8; i = i+1){
	printf("i=%s;  When x = %s", i, X^i);
	f = subst(E, x, X^i);
	printf("poly f after substitution of x =%s:", X^i);
	f;
	printf("poly f factorizes as:");
	factorize(f);
	"================================";
}
printf("");
// number = element in the field
number x1, y1;
list P;
list R;

x1 = X^6;
y1 = 1;
//x1 = 0;
//y1 = 1;
P = x1, y1;
R = PplusP(P);
R;
int j;
printf("");
printf("SCHROEPPEL");
printf("--------------------------");
printf("Generating All the points with primitive element P: (X^6,1)");
"Point 1: ";
printf("P = (%s, %s)", P[1], P[2]);
for(j = 1; j<14; j = j+1){
    // doubling point first
    printf("Point %s: ",j + 1);
    if( j == 1){
    R = PplusP(P);
    
    printf("P = (%s, %s)", R[1], R[2]);
    }
    else{
    
      R =  PplusQ(P,R);
      printf("P = (%s, %s)", R[1], R[2]);
    }
}


printf("");
printf("LOPEZ DAHAB POINT DOUBLING");
printf("--------------------------");
printf("Generating All the points with primitive element P: (X^6,1)");
"Point 1: ";
printf("P = (%s, %s)", P[1], P[2]);
for(j = 1; j<14; j = j+1){
    // doubling point first
    printf("Point %s: ",j + 1);
    if( j == 1){
    R = DL_PplusP(P);
    
    printf("P = (%s, %s)", R[1], R[2]);
    }
    else{
    
      R =  PplusQ(P,R);
      printf("P = (%s, %s)", R[1], R[2]);
    }
}

"";
int p;
"printing only doubled points on the field using DL";
p = 2;
for(j = 1; j<4; j = j+1){
    P = DL_PplusP(P);
    printf("Point %s= (%s, %s)",p, P[1], P[2]);
    p = p*2;
}

"";
//veryfing POINT DOUBLING
list D,R;
number d1;
number d2;

d1 = X;
d2 = 1;
D = d1,d2;
R = DL_PplusP(D);
"SINGULAR POINT DOUBLING point 1";
"-------------------------------";
printf("Doubling point D :(%s), (%s)", D[1], D[2]);
printf("D^2= (%s), (%s)", R[1], R[2]);


// Verifying Doubling point in hardware
"";
"HARDWARE VERIFICATION point 1";
"-----------------------------";
// X2 = 110, Y2 = 001 Z2 = 100 values obtained in verilog
number X3,Y3,Z3;
X3 = X^2 + X;
Y3 = 1;
Z3 = X^2;
"making sure the values in circuit are the same dividing by X/Z3 Y/Z3^2:";
printf("(X3,Y3,Z3) = (%s,%s,%s)",X3,Y3,Z3);
printf("X3/Z3 = %s",X3/Z3);
printf("Y3/Z3 = %s",Y3/(Z3^2));

"";
"SINGULAR POINT DOUBLING point 2";
"-------------------------------";
// point alpha^2 + 1 , alpha + 1
d1 = X^2 + X + 1;
d2 = X + 1;
D = d1,d2;
R = DL_PplusP(D);
printf("Doubling point D :(%s), (%s)", D[1], D[2]);
printf("D^2 = (%s), (%s)", R[1], R[2]);

// verilog output:X2 = 101, Y2 = 111 Z2 = 010
X3 = X^2 + 1;
Y3 = X^2 + X + 1;
Z3 = X;
"";
"HARDWARE VERIFICATION point 2";
"-----------------------------";
"making sure the values in circuit are the same dividing by X/Z3 Y/Z3^2:";
printf("(X3,Y3,Z3) = (%s,%s,%s)",X3,Y3,Z3);
printf("X3/Z3 = %s",X3/Z3);
// Double the point Z3
printf("Y3/(Z3^2) = %s",Y3/(Z3^2));

"";
number d3,d4;
list D2;
d1 = X^2 + X;
d2 = 1;
D = d1,d2;
d3 = X^2 + X + 1;
d4 = X;
D2 = d3,d4;

"SINGULAR POINT ADDITION getting point 3";
"---------------------------------------";
R = PplusQ(D,D2);
printf("adding points D :(%s), (%s) and D2 :(%s), (%s)", D[1], D[2], D2[1], D2[2]);
printf("D + D2 = (%s), (%s)", R[1], R[2]);

printf("");
"SINGULAR POINT ADDITION getting point 13";
"---------------------------------------";
R = PplusQ(D,D2);
printf("adding points D :(%s), (%s) and D2 :(%s), (%s)", D[1], D[2], D2[1], D2[2]);
printf("D + D2 = (%s), (%s)", R[1], R[2]);

printf("");
"HARDWARE VERIFICATION for ALL points (X/Z3  and  Y/Z3^2:)";
"-----------------------------";
number xa,ya,za;
printf("proj coord point  ->  affine coord point");
xa = X2 + X;
ya = 1;
za = 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P1: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2;
ya = X2 + X + 1;
za = X + 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P2: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2 + X + 1;
ya = 0;
za = X2 + X;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P3: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2 + X + 1;
ya = X2 + 1;
za = X2;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P4: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2 + X;
ya = X + 1;
za = X2 + 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P5: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2;
ya = X2;
za = X;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P6: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = 0;
ya = X2;
za = X;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P7: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2 + 1;
ya = X2;
za = X2;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P8: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X;
ya = X;
za = X + 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P9: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X2 + X + 1;
ya = X + 1;
za = X2;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P10: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X;
ya = X2 + X + 1;
za = X2 + 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P11: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X;
ya = X2 + X + 1;
za = X2 + X + 1;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P12: (%s,%s,%s)", P[1],P[2],P[3]);
printf(" -> (%s,%s)",R[1],R[2]);

xa = X;
ya = X;
za = X2;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P13: (%s,%s,%s)", P[1],P[2],P[3]);
printf("  -> (%s,%s)",R[1],R[2]);

xa = X2 + X;
ya = 0;
za = 0;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P14: (%s,%s,%s)", P[1],P[2],P[3]);
printf("  -> (%s,%s)",R[1],R[2]);

xa = 0;
ya = 0;
za = 0;
P = xa,ya,za;
R = ProjectiveToAffine(P);
printf("P15: (%s,%s,%s)", P[1],P[2],P[3]);
printf("  -> (%s,%s)",R[1],R[2]);
printf("Expecting P14 == P0");
